# -*- coding: utf-8 -*-
"""Slic3r Config Unbundler
"""

import os
import configparser
import hashlib


def unbundle_section(config_bundle, config, cfg_section):
    setting_type, setting_name = cfg_section.split(":")
    if not os.path.exists(setting_type):
        os.mkdir(setting_type)
    setting_file = os.path.join(setting_type, setting_name)

    header_cfg = dict()

    filehash = hashlib.sha256()
    filehash.update(open(config_bundle, 'rb').read())
    header_cfg["sha256"] = filehash.hexdigest()

    header_cfg["config_bundle"] = config_bundle
    header_cfg["setting_type"] = setting_type.capitalize()
    header_cfg["setting_name"] = setting_name

    ini_header = """# {setting_type} Setting: {setting_name}
#
# This file is automatically generated.
# Permanent changes should be made in '{config_bundle}'
# SHA256 = {sha256}
""".format(**header_cfg)

    ini_tmp = list()
    for setting, value in config[cfg_section].items():
        ini_tmp.append("{} = {}".format(setting, value))

    ini_body = "\n".join(ini_tmp)

    with open(setting_file, 'w') as fid:
        print("\tUnbundling: {}".format(setting_file))
        print(ini_header, file=fid)
        print(ini_body, file=fid)


def unbundle(config_bundle=None):
    if config_bundle is None:
        config_bundle = "Slic3r_config_bundle.ini"

    print("Loading: {}".format(config_bundle))

    config = configparser.ConfigParser(strict=False, interpolation=None)
    config.read(config_bundle)
    for cfg_section in config.sections():
        if ":" in cfg_section:
            unbundle_section(config_bundle=config_bundle,
                             config=config,
                             cfg_section=cfg_section)


if __name__ == '__main__':
    import sys
    unbundle(sys.argv[1])
